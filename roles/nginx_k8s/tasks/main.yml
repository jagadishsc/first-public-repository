- name: Create Nginx Service
  k8s:
    state: present
    namespace: pluto
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: nginx
        labels:
          app: nginx
        annotations:
          cloud.google.com/app-protocols: '{"nginx-https":"HTTPS","nginx-http":"HTTP"}'
      spec:
        type: NodePort
        ports:
        - port: 443
          targetPort: 443
          name: nginx-https
        - port: 80
          targetPort: 80
          name: nginx-http
        selector:
          app: nginx
  environment:
    GOOGLE_APPLICATION_CREDENTIALS: "{{ sa_path }}"

- name: Import Nginx settings
  k8s:
    state: present
    namespace: pluto
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: nginx-tls
      type: Opaque
      data:
        tls.crt: "{{ lookup('template', 'templates/plutoshift2022.com.chained.crt.j2') | b64encode }}"
        tls.key: "{{ lookup('template', 'templates/plutoshift2022.key.j2') | b64encode }}"

- name: Create Nginx Main ConfigMap
  k8s:
    state: present
    namespace: pluto
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: nginx-conf
      data:
        nginx.conf: |
          user  nginx;
          worker_processes  auto;

          error_log  /var/log/nginx/error.log info;
          pid        /var/run/nginx.pid;

          events {
              worker_connections  10240;
          }

          http {
              include       /etc/nginx/mime.types;
              default_type  application/octet-stream;
              ssl_protocols TLSv1.1 TLSv1.2;

              log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                '$status $body_bytes_sent "$http_referer" '
                                '"$http_user_agent" "$http_x_forwarded_for"';

              access_log  /var/log/nginx/access.log  main;

              sendfile        on;
              tcp_nopush     on;
              tcp_nodelay on;
              types_hash_max_size 2048;

              keepalive_timeout 650;
              keepalive_requests 10000;

              gzip  on;
              gzip_disable "msie6";

              include /etc/nginx/conf.d/*.conf;
          }
  environment:
    GOOGLE_APPLICATION_CREDENTIALS: "{{ sa_path }}"

- name: Create Nginx Site ConfigMap
  k8s:
    state: present
    namespace: pluto
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: nginx-site
      data:
        nginx.conf: |
          upstream frontend {
              server frontend:8080;
          }

          server {
              listen   80;
              listen              443 ssl default_server;
              ssl_protocols       TLSv1.1 TLSv1.2;
              server_name         {{ server_name }};
              ssl_certificate     /etc/nginx/ssl/plutoshift2022.com.chained.crt;
              ssl_certificate_key /etc/nginx/ssl/plutoshift2022.key;
              proxy_connect_timeout       600;
              proxy_send_timeout          600;
              proxy_read_timeout          600;
              send_timeout                600;

              add_header X-XSS-Protection "1; mode=block";
              add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload';
              add_header X-Frame-Options SAMEORIGIN;
              add_header X-Content-Type-Options nosniff;
              add_header Content-Security-Policy "default-src 'self' https://atlas.plutoshift.com; child-src 'self' https://www.google.com; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.gstatic.com https://www.google.com https://www.google-analytics.com https://unpkg.com https://cdn.plot.ly; img-src 'self' https://www.google-analytics.com https://*.tile.openstreetmap.org blob: data:; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://unpkg.com; font-src 'self' https://fonts.gstatic.com";

              if ($scheme = http) {
                  return 301 https://$host$request_uri;
              }

              if ($http_x_forwarded_proto = "http") {
                  return 301 https://$host$request_uri;
              }

              location / {
                  proxy_pass http://frontend;
                  proxy_redirect http://frontend https://{{ server_name }};
              }
          }
  environment:
    GOOGLE_APPLICATION_CREDENTIALS: "{{ sa_path }}"

- name: Create Nginx Deployment
  k8s:
    state: present
    namespace: pluto
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: nginx
      spec:
        selector:
          matchLabels:
            app: nginx
        replicas: 3
        template:
          metadata:
            labels:
              app: nginx
          spec:
            containers:
            - name: nginx
              image: nginx:latest
              livenessProbe:
                httpGet:
                  path: /
                  port: nginx-https
                  scheme: HTTPS
              readinessProbe:
                httpGet:
                  path: /
                  port: nginx-https
                  scheme: HTTPS
              ports:
              - containerPort: 443
                name: nginx-https
              - containerPort: 80
                name: nginx-http
              volumeMounts:
              - name: nginx-conf-vol
                readOnly: true
                mountPath: /etc/nginx/nginx.conf
                subPath: nginx.conf
              - name: nginx-site-vol
                readOnly: true
                mountPath: /etc/nginx/conf.d
              - name: nginx-ssl-vol
                readOnly: true
                mountPath: /etc/nginx/ssl
            volumes:
              - name: nginx-conf-vol
                configMap:
                  name: nginx-conf
                  items:
                  - key: nginx.conf
                    path: nginx.conf
              - name: nginx-site-vol
                configMap:
                  name: nginx-site
                  items:
                  - key: nginx.conf
                    path: nginx.conf
              - name: nginx-ssl-vol
                secret:
                  secretName: nginx-tls
                  items:
                  - key: tls.crt
                    path: plutoshift2022.com.chained.crt
                  - key: tls.key
                    path: plutoshift2022.key
  environment:
    GOOGLE_APPLICATION_CREDENTIALS: "{{ sa_path }}"

- name: Create Nginx Load Balancer
  k8s:
    state: present
    namespace: pluto
    definition:
      kind: Ingress
      apiVersion: v1
      metadata:
        name: nginx-ingress
      spec:
        tls:
        - secretName: nginx-tls
        defaultBackend:
          service:
            name: nginx
            port:
              number: 443
